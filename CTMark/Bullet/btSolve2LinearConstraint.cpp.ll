; ModuleID = '/home/npopov/repos/llvm-test-suite/CTMark/Bullet/btSolve2LinearConstraint.cpp'
source_filename = "/home/npopov/repos/llvm-test-suite/CTMark/Bullet/btSolve2LinearConstraint.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%class.btVector3 = type { [4 x float] }
%class.btRigidBody = type <{ %class.btCollisionObject, %class.btMatrix3x3, %class.btVector3, %class.btVector3, float, %class.btVector3, %class.btVector3, %class.btVector3, %class.btVector3, %class.btVector3, %class.btVector3, %class.btVector3, float, float, i8, [3 x i8], float, float, float, float, float, float, ptr, %class.btAlignedObjectArray, i32, i32, i32, [4 x i8] }>
%class.btCollisionObject = type { ptr, %class.btTransform, %class.btTransform, %class.btVector3, %class.btVector3, %class.btVector3, i8, float, ptr, ptr, ptr, i32, i32, i32, i32, float, float, float, ptr, i32, float, float, float, i8, [7 x i8] }
%class.btTransform = type { %class.btMatrix3x3, %class.btVector3 }
%class.btMatrix3x3 = type { [3 x %class.btVector3] }
%class.btAlignedObjectArray = type <{ %class.btAlignedAllocator, [3 x i8], i32, i32, [4 x i8], ptr, i8, [7 x i8] }>
%class.btAlignedAllocator = type { i8 }
%class.btSolve2LinearConstraint = type { float, float }

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) uwtable
define dso_local void @_ZN24btSolve2LinearConstraint31resolveUnilateralPairConstraintEP11btRigidBodyS1_RK11btMatrix3x3S4_RK9btVector3fS7_S7_S7_S7_fS7_S7_S7_fS7_S7_S7_fS7_RfS8_(ptr nocapture noundef nonnull readonly align 4 dereferenceable(8) %this, ptr nocapture noundef readonly %body1, ptr nocapture noundef readonly %body2, ptr nocapture noundef nonnull readonly align 4 dereferenceable(48) %world2A, ptr nocapture noundef nonnull readonly align 4 dereferenceable(48) %world2B, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %invInertiaADiag, float noundef %invMassA, ptr nocapture noundef nonnull readnone align 4 dereferenceable(16) %linvelA, ptr nocapture noundef nonnull readnone align 4 dereferenceable(16) %angvelA, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %rel_posA1, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %invInertiaBDiag, float noundef %invMassB, ptr nocapture noundef nonnull readnone align 4 dereferenceable(16) %linvelB, ptr nocapture noundef nonnull readnone align 4 dereferenceable(16) %angvelB, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %rel_posA2, float noundef %depthA, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %normalA, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %rel_posB1, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %rel_posB2, float noundef %depthB, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %normalB, ptr nocapture noundef nonnull writeonly align 4 dereferenceable(4) %imp0, ptr nocapture noundef nonnull writeonly align 4 dereferenceable(4) %imp1) local_unnamed_addr #0 align 2 {
entry:
  store float 0.000000e+00, ptr %imp0, align 4
  store float 0.000000e+00, ptr %imp1, align 4
  %0 = load float, ptr %normalA, align 4
  %arrayidx5.i.i.i = getelementptr inbounds [4 x float], ptr %normalA, i64 0, i64 1
  %1 = load float, ptr %arrayidx5.i.i.i, align 4
  %mul8.i.i.i = fmul float %1, %1
  %2 = tail call float @llvm.fmuladd.f32(float %0, float %0, float %mul8.i.i.i)
  %arrayidx10.i.i.i = getelementptr inbounds [4 x float], ptr %normalA, i64 0, i64 2
  %3 = load float, ptr %arrayidx10.i.i.i, align 4
  %4 = tail call float @llvm.fmuladd.f32(float %3, float %3, float %2)
  %sqrt.i = tail call float @llvm.sqrt.f32(float %4)
  %5 = tail call float @llvm.fabs.f32(float %sqrt.i)
  %sub = fadd float %5, -1.000000e+00
  %6 = tail call float @llvm.fabs.f32(float %sub)
  %cmp = fcmp ult float %6, 0x3E80000000000000
  br i1 %cmp, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  %arrayidx.i.i = getelementptr inbounds [4 x float], ptr %rel_posA1, i64 0, i64 1
  %7 = load float, ptr %arrayidx.i.i, align 4
  %arrayidx5.i.i = getelementptr inbounds [4 x float], ptr %rel_posA1, i64 0, i64 2
  %8 = load float, ptr %arrayidx5.i.i, align 4
  %9 = fneg float %8
  %10 = load float, ptr %rel_posA1, align 4
  %11 = fneg float %10
  %12 = fneg float %7
  %13 = load float, ptr %world2A, align 4
  %arrayidx5.i.i.i78 = getelementptr inbounds [4 x float], ptr %world2A, i64 0, i64 1
  %14 = load float, ptr %arrayidx5.i.i.i78, align 4
  %arrayidx10.i.i.i80 = getelementptr inbounds [4 x float], ptr %world2A, i64 0, i64 2
  %15 = load float, ptr %arrayidx10.i.i.i80, align 4
  %arrayidx.i.i.i = getelementptr inbounds [3 x %class.btVector3], ptr %world2A, i64 0, i64 1
  %16 = load <4 x float>, ptr %arrayidx.i.i.i, align 4
  %17 = shufflevector <4 x float> %16, <4 x float> poison, <2 x i32> <i32 0, i32 poison>
  %arrayidx5.i12.i.i = getelementptr inbounds [3 x %class.btVector3], ptr %world2A, i64 0, i64 1, i32 0, i64 1
  %18 = load <4 x float>, ptr %arrayidx5.i12.i.i, align 4
  %19 = shufflevector <4 x float> %18, <4 x float> poison, <2 x i32> <i32 0, i32 poison>
  %arrayidx10.i15.i.i = getelementptr inbounds [3 x %class.btVector3], ptr %world2A, i64 0, i64 1, i32 0, i64 2
  %20 = load <4 x float>, ptr %arrayidx10.i15.i.i, align 4
  %21 = shufflevector <4 x float> %20, <4 x float> poison, <2 x i32> <i32 0, i32 poison>
  %arrayidx.i17.i.i = getelementptr inbounds [3 x %class.btVector3], ptr %world2A, i64 0, i64 2
  %22 = load <4 x float>, ptr %arrayidx.i17.i.i, align 4
  %23 = shufflevector <4 x float> %22, <4 x float> poison, <2 x i32> <i32 0, i32 poison>
  %arrayidx5.i18.i.i = getelementptr inbounds [3 x %class.btVector3], ptr %world2A, i64 0, i64 2, i32 0, i64 1
  %24 = load float, ptr %arrayidx5.i18.i.i, align 4
  %arrayidx10.i21.i.i = getelementptr inbounds [3 x %class.btVector3], ptr %world2A, i64 0, i64 2, i32 0, i64 2
  %25 = load float, ptr %arrayidx10.i21.i.i, align 4
  %fneg.i.i = fneg float %0
  %fneg4.i.i = fneg float %1
  %fneg8.i.i = fneg float %3
  %arrayidx.i48.i = getelementptr inbounds [4 x float], ptr %rel_posA2, i64 0, i64 1
  %26 = load float, ptr %arrayidx.i48.i, align 4
  %arrayidx5.i50.i = getelementptr inbounds [4 x float], ptr %rel_posA2, i64 0, i64 2
  %27 = load float, ptr %arrayidx5.i50.i, align 4
  %28 = load float, ptr %rel_posA2, align 4
  %29 = load float, ptr %world2B, align 4
  %arrayidx5.i.i60.i = getelementptr inbounds [4 x float], ptr %world2B, i64 0, i64 1
  %30 = load float, ptr %arrayidx5.i.i60.i, align 4
  %arrayidx10.i.i63.i = getelementptr inbounds [4 x float], ptr %world2B, i64 0, i64 2
  %31 = load float, ptr %arrayidx10.i.i63.i, align 4
  %arrayidx.i.i65.i = getelementptr inbounds [3 x %class.btVector3], ptr %world2B, i64 0, i64 1
  %32 = load float, ptr %arrayidx.i.i65.i, align 4
  %arrayidx5.i12.i66.i = getelementptr inbounds [3 x %class.btVector3], ptr %world2B, i64 0, i64 1, i32 0, i64 1
  %33 = load float, ptr %arrayidx5.i12.i66.i, align 4
  %arrayidx10.i15.i68.i = getelementptr inbounds [3 x %class.btVector3], ptr %world2B, i64 0, i64 1, i32 0, i64 2
  %34 = load float, ptr %arrayidx10.i15.i68.i, align 4
  %arrayidx.i17.i69.i = getelementptr inbounds [3 x %class.btVector3], ptr %world2B, i64 0, i64 2
  %35 = load <4 x float>, ptr %arrayidx.i17.i69.i, align 4
  %36 = shufflevector <4 x float> %35, <4 x float> poison, <2 x i32> <i32 0, i32 poison>
  %arrayidx5.i18.i70.i = getelementptr inbounds [3 x %class.btVector3], ptr %world2B, i64 0, i64 2, i32 0, i64 1
  %37 = load float, ptr %arrayidx5.i18.i70.i, align 4
  %arrayidx10.i21.i72.i = getelementptr inbounds [3 x %class.btVector3], ptr %world2B, i64 0, i64 2, i32 0, i64 2
  %38 = load float, ptr %arrayidx10.i21.i72.i, align 4
  %39 = load float, ptr %invInertiaADiag, align 4
  %arrayidx5.i78.i = getelementptr inbounds [4 x float], ptr %invInertiaADiag, i64 0, i64 1
  %40 = load float, ptr %arrayidx5.i78.i, align 4
  %arrayidx11.i.i = getelementptr inbounds [4 x float], ptr %invInertiaADiag, i64 0, i64 2
  %41 = load float, ptr %arrayidx11.i.i, align 4
  %42 = load float, ptr %invInertiaBDiag, align 4
  %arrayidx5.i86.i = getelementptr inbounds [4 x float], ptr %invInertiaBDiag, i64 0, i64 1
  %43 = load float, ptr %arrayidx5.i86.i, align 4
  %arrayidx11.i89.i = getelementptr inbounds [4 x float], ptr %invInertiaBDiag, i64 0, i64 2
  %44 = load float, ptr %arrayidx11.i89.i, align 4
  %jacB.sroa.0.0.copyload = load float, ptr %normalB, align 4
  %jacB.sroa.5.0.normalB.sroa_idx = getelementptr inbounds i8, ptr %normalB, i64 4
  %jacB.sroa.5.0.copyload = load float, ptr %jacB.sroa.5.0.normalB.sroa_idx, align 4
  %jacB.sroa.7.0.normalB.sroa_idx = getelementptr inbounds i8, ptr %normalB, i64 8
  %jacB.sroa.7.0.copyload = load float, ptr %jacB.sroa.7.0.normalB.sroa_idx, align 4
  %arrayidx.i.i85 = getelementptr inbounds [4 x float], ptr %rel_posB1, i64 0, i64 1
  %45 = load float, ptr %arrayidx.i.i85, align 4
  %arrayidx5.i.i87 = getelementptr inbounds [4 x float], ptr %rel_posB1, i64 0, i64 2
  %46 = load float, ptr %arrayidx5.i.i87, align 4
  %47 = fneg float %46
  %48 = load float, ptr %rel_posB1, align 4
  %49 = fneg float %48
  %50 = fneg float %45
  %fneg.i.i107 = fneg float %jacB.sroa.0.0.copyload
  %fneg4.i.i108 = fneg float %jacB.sroa.5.0.copyload
  %fneg8.i.i109 = fneg float %jacB.sroa.7.0.copyload
  %arrayidx.i48.i110 = getelementptr inbounds [4 x float], ptr %rel_posB2, i64 0, i64 1
  %51 = load float, ptr %arrayidx.i48.i110, align 4
  %arrayidx5.i50.i111 = getelementptr inbounds [4 x float], ptr %rel_posB2, i64 0, i64 2
  %52 = load float, ptr %arrayidx5.i50.i111, align 4
  %53 = load float, ptr %rel_posB2, align 4
  %m_linearVelocity.i = getelementptr inbounds %class.btRigidBody, ptr %body1, i64 0, i32 2
  %m_angularVelocity.i = getelementptr inbounds %class.btRigidBody, ptr %body1, i64 0, i32 3
  %arrayidx.i.i154 = getelementptr inbounds %class.btRigidBody, ptr %body1, i64 0, i32 3, i32 0, i64 1
  %54 = load float, ptr %arrayidx.i.i154, align 4
  %arrayidx5.i.i156 = getelementptr inbounds %class.btRigidBody, ptr %body1, i64 0, i32 3, i32 0, i64 2
  %55 = load float, ptr %arrayidx5.i.i156, align 4
  %56 = load float, ptr %m_angularVelocity.i, align 4
  %57 = load float, ptr %m_linearVelocity.i, align 4
  %arrayidx5.i5.i = getelementptr inbounds %class.btRigidBody, ptr %body1, i64 0, i32 2, i32 0, i64 1
  %58 = load float, ptr %arrayidx5.i5.i, align 4
  %arrayidx11.i.i161 = getelementptr inbounds %class.btRigidBody, ptr %body1, i64 0, i32 2, i32 0, i64 2
  %59 = load float, ptr %arrayidx11.i.i161, align 4
  %m_linearVelocity.i162 = getelementptr inbounds %class.btRigidBody, ptr %body2, i64 0, i32 2
  %m_angularVelocity.i163 = getelementptr inbounds %class.btRigidBody, ptr %body2, i64 0, i32 3
  %arrayidx.i.i164 = getelementptr inbounds %class.btRigidBody, ptr %body2, i64 0, i32 3, i32 0, i64 1
  %60 = load float, ptr %arrayidx.i.i164, align 4
  %arrayidx5.i.i166 = getelementptr inbounds %class.btRigidBody, ptr %body2, i64 0, i32 3, i32 0, i64 2
  %61 = load float, ptr %arrayidx5.i.i166, align 4
  %62 = load float, ptr %m_angularVelocity.i163, align 4
  %63 = load float, ptr %m_linearVelocity.i162, align 4
  %64 = insertelement <2 x float> poison, float %55, i64 0
  %65 = insertelement <2 x float> %64, float %61, i64 1
  %66 = fneg <2 x float> %65
  %67 = insertelement <2 x float> poison, float %7, i64 0
  %68 = shufflevector <2 x float> %67, <2 x float> poison, <2 x i32> zeroinitializer
  %69 = fmul <2 x float> %68, %66
  %70 = insertelement <2 x float> poison, float %54, i64 0
  %71 = insertelement <2 x float> %70, float %60, i64 1
  %72 = insertelement <2 x float> poison, float %8, i64 0
  %73 = shufflevector <2 x float> %72, <2 x float> poison, <2 x i32> zeroinitializer
  %74 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %71, <2 x float> %73, <2 x float> %69)
  %75 = insertelement <2 x float> poison, float %57, i64 0
  %76 = insertelement <2 x float> %75, float %63, i64 1
  %77 = fadd <2 x float> %74, %76
  %arrayidx5.i5.i172 = getelementptr inbounds %class.btRigidBody, ptr %body2, i64 0, i32 2, i32 0, i64 1
  %78 = load float, ptr %arrayidx5.i5.i172, align 4
  %79 = insertelement <2 x float> poison, float %56, i64 0
  %80 = insertelement <2 x float> %79, float %62, i64 1
  %81 = fneg <2 x float> %80
  %82 = fmul <2 x float> %73, %81
  %83 = insertelement <2 x float> poison, float %10, i64 0
  %84 = shufflevector <2 x float> %83, <2 x float> poison, <2 x i32> zeroinitializer
  %85 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %65, <2 x float> %84, <2 x float> %82)
  %86 = insertelement <2 x float> poison, float %58, i64 0
  %87 = insertelement <2 x float> %86, float %78, i64 1
  %88 = fadd <2 x float> %87, %85
  %arrayidx11.i.i174 = getelementptr inbounds %class.btRigidBody, ptr %body2, i64 0, i32 2, i32 0, i64 2
  %89 = load float, ptr %arrayidx11.i.i174, align 4
  %90 = fneg <2 x float> %71
  %91 = fmul <2 x float> %84, %90
  %92 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %80, <2 x float> %68, <2 x float> %91)
  %93 = insertelement <2 x float> poison, float %59, i64 0
  %94 = insertelement <2 x float> %93, float %89, i64 1
  %95 = fadd <2 x float> %92, %94
  %shift = shufflevector <2 x float> %77, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %96 = fsub <2 x float> %77, %shift
  %sub.i = extractelement <2 x float> %96, i64 0
  %shift267 = shufflevector <2 x float> %88, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %97 = fsub <2 x float> %88, %shift267
  %sub8.i = extractelement <2 x float> %97, i64 0
  %shift268 = shufflevector <2 x float> %95, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %98 = fsub <2 x float> %95, %shift268
  %sub14.i = extractelement <2 x float> %98, i64 0
  %mul8.i = fmul float %1, %sub8.i
  %99 = tail call float @llvm.fmuladd.f32(float %0, float %sub.i, float %mul8.i)
  %100 = tail call float @llvm.fmuladd.f32(float %3, float %sub14.i, float %99)
  %101 = insertelement <2 x float> poison, float %45, i64 0
  %102 = shufflevector <2 x float> %101, <2 x float> poison, <2 x i32> zeroinitializer
  %103 = fmul <2 x float> %102, %66
  %104 = insertelement <2 x float> poison, float %46, i64 0
  %105 = shufflevector <2 x float> %104, <2 x float> poison, <2 x i32> zeroinitializer
  %106 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %71, <2 x float> %105, <2 x float> %103)
  %107 = fadd <2 x float> %106, %76
  %108 = fmul <2 x float> %105, %81
  %109 = insertelement <2 x float> poison, float %48, i64 0
  %110 = shufflevector <2 x float> %109, <2 x float> poison, <2 x i32> zeroinitializer
  %111 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %65, <2 x float> %110, <2 x float> %108)
  %112 = fadd <2 x float> %87, %111
  %113 = fmul <2 x float> %110, %90
  %114 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %80, <2 x float> %102, <2 x float> %113)
  %115 = fadd <2 x float> %114, %94
  %shift269 = shufflevector <2 x float> %107, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %116 = fsub <2 x float> %107, %shift269
  %sub.i221 = extractelement <2 x float> %116, i64 0
  %shift270 = shufflevector <2 x float> %112, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %117 = fsub <2 x float> %112, %shift270
  %sub8.i224 = extractelement <2 x float> %117, i64 0
  %shift271 = shufflevector <2 x float> %115, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %118 = fsub <2 x float> %115, %shift271
  %sub14.i227 = extractelement <2 x float> %118, i64 0
  %mul8.i235 = fmul float %jacB.sroa.5.0.copyload, %sub8.i224
  %119 = tail call float @llvm.fmuladd.f32(float %jacB.sroa.0.0.copyload, float %sub.i221, float %mul8.i235)
  %120 = tail call float @llvm.fmuladd.f32(float %jacB.sroa.7.0.copyload, float %sub14.i227, float %119)
  %add = fadd float %invMassA, %invMassB
  %div = fdiv float 1.000000e+00, %add
  %121 = load float, ptr %this, align 4
  %mul = fmul float %121, %depthA
  %m_damping = getelementptr inbounds %class.btSolve2LinearConstraint, ptr %this, i64 0, i32 1
  %122 = load float, ptr %m_damping, align 4
  %123 = fneg float %100
  %neg = fmul float %122, %123
  %124 = tail call float @llvm.fmuladd.f32(float %mul, float %div, float %neg)
  %mul25 = fmul float %121, %depthB
  %125 = fneg float %120
  %neg29 = fmul float %122, %125
  %126 = tail call float @llvm.fmuladd.f32(float %mul25, float %div, float %neg29)
  %mul8.i.i241 = fmul float %1, %jacB.sroa.5.0.copyload
  %127 = insertelement <2 x float> poison, float %1, i64 0
  %128 = shufflevector <2 x float> %127, <2 x float> poison, <2 x i32> zeroinitializer
  %129 = insertelement <2 x float> poison, float %9, i64 0
  %130 = insertelement <2 x float> %129, float %27, i64 1
  %131 = fmul <2 x float> %128, %130
  %132 = insertelement <2 x float> %67, float %26, i64 1
  %133 = insertelement <2 x float> poison, float %3, i64 0
  %134 = insertelement <2 x float> %133, float %fneg8.i.i, i64 1
  %135 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %132, <2 x float> %134, <2 x float> %131)
  %136 = shufflevector <2 x float> %133, <2 x float> poison, <2 x i32> zeroinitializer
  %137 = insertelement <2 x float> poison, float %11, i64 0
  %138 = insertelement <2 x float> %137, float %28, i64 1
  %139 = fmul <2 x float> %136, %138
  %140 = insertelement <2 x float> %72, float %27, i64 1
  %141 = insertelement <2 x float> poison, float %0, i64 0
  %142 = insertelement <2 x float> %141, float %fneg.i.i, i64 1
  %143 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %140, <2 x float> %142, <2 x float> %139)
  %144 = shufflevector <2 x float> %141, <2 x float> poison, <2 x i32> zeroinitializer
  %145 = insertelement <2 x float> %132, float %12, i64 0
  %146 = fmul <2 x float> %144, %145
  %147 = insertelement <2 x float> %83, float %28, i64 1
  %148 = insertelement <2 x float> %128, float %fneg4.i.i, i64 1
  %149 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %147, <2 x float> %148, <2 x float> %146)
  %150 = insertelement <2 x float> %19, float %33, i64 1
  %151 = fmul <2 x float> %143, %150
  %152 = insertelement <2 x float> %17, float %32, i64 1
  %153 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %152, <2 x float> %135, <2 x float> %151)
  %154 = insertelement <2 x float> %21, float %34, i64 1
  %155 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %154, <2 x float> %149, <2 x float> %153)
  %156 = insertelement <2 x float> poison, float %40, i64 0
  %157 = insertelement <2 x float> %156, float %43, i64 1
  %158 = fmul <2 x float> %155, %157
  %159 = fmul <2 x float> %155, %158
  %mul8.i99.i = extractelement <2 x float> %159, i64 0
  %160 = fmul <2 x float> %155, %158
  %mul8.i102.i = extractelement <2 x float> %160, i64 1
  %161 = insertelement <2 x float> poison, float %jacB.sroa.5.0.copyload, i64 0
  %162 = shufflevector <2 x float> %161, <2 x float> poison, <2 x i32> zeroinitializer
  %163 = insertelement <2 x float> poison, float %47, i64 0
  %164 = insertelement <2 x float> %163, float %52, i64 1
  %165 = fmul <2 x float> %162, %164
  %166 = insertelement <2 x float> %101, float %51, i64 1
  %167 = insertelement <2 x float> poison, float %jacB.sroa.7.0.copyload, i64 0
  %168 = insertelement <2 x float> %167, float %fneg8.i.i109, i64 1
  %169 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %166, <2 x float> %168, <2 x float> %165)
  %170 = shufflevector <2 x float> %167, <2 x float> poison, <2 x i32> zeroinitializer
  %171 = insertelement <2 x float> poison, float %49, i64 0
  %172 = insertelement <2 x float> %171, float %53, i64 1
  %173 = fmul <2 x float> %170, %172
  %174 = insertelement <2 x float> %104, float %52, i64 1
  %175 = insertelement <2 x float> poison, float %jacB.sroa.0.0.copyload, i64 0
  %176 = insertelement <2 x float> %175, float %fneg.i.i107, i64 1
  %177 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %174, <2 x float> %176, <2 x float> %173)
  %178 = shufflevector <2 x float> %175, <2 x float> poison, <2 x i32> zeroinitializer
  %179 = insertelement <2 x float> %166, float %50, i64 0
  %180 = fmul <2 x float> %178, %179
  %181 = insertelement <2 x float> %109, float %53, i64 1
  %182 = insertelement <2 x float> %162, float %fneg4.i.i108, i64 1
  %183 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %181, <2 x float> %182, <2 x float> %180)
  %184 = fmul <2 x float> %150, %177
  %185 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %152, <2 x float> %169, <2 x float> %184)
  %186 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %154, <2 x float> %183, <2 x float> %185)
  %187 = extractelement <2 x float> %186, i64 0
  %mul8.i.i132 = fmul float %40, %187
  %188 = extractelement <2 x float> %186, i64 1
  %mul8.i88.i141 = fmul float %43, %188
  %mul8.i99.i148 = fmul float %187, %mul8.i.i132
  %mul8.i102.i151 = fmul float %188, %mul8.i88.i141
  %189 = fmul <2 x float> %158, %186
  %mul4.i.i.i = fmul float %mul8.i.i241, %invMassA
  %mul4.i.i54.i = fmul float %mul8.i.i241, %invMassB
  %shift272 = shufflevector <2 x float> %189, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %190 = fadd <2 x float> %189, %shift272
  %add8.i.i250 = extractelement <2 x float> %190, i64 0
  %add8.i74.i = fadd float %mul4.i.i.i, %add8.i.i250
  %add8.i86.i = fadd float %mul4.i.i54.i, %add8.i74.i
  %191 = shufflevector <2 x float> %143, <2 x float> poison, <2 x i32> zeroinitializer
  %192 = insertelement <2 x float> poison, float %24, i64 0
  %193 = insertelement <2 x float> %192, float %14, i64 1
  %194 = fmul <2 x float> %191, %193
  %195 = insertelement <2 x float> %23, float %13, i64 1
  %196 = shufflevector <2 x float> %135, <2 x float> poison, <2 x i32> zeroinitializer
  %197 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %195, <2 x float> %196, <2 x float> %194)
  %198 = insertelement <2 x float> poison, float %25, i64 0
  %199 = insertelement <2 x float> %198, float %15, i64 1
  %200 = shufflevector <2 x float> %149, <2 x float> poison, <2 x i32> zeroinitializer
  %201 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %199, <2 x float> %200, <2 x float> %197)
  %202 = shufflevector <2 x float> %143, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %203 = insertelement <2 x float> poison, float %37, i64 0
  %204 = insertelement <2 x float> %203, float %30, i64 1
  %205 = fmul <2 x float> %202, %204
  %206 = insertelement <2 x float> %36, float %29, i64 1
  %207 = shufflevector <2 x float> %135, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %208 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %206, <2 x float> %207, <2 x float> %205)
  %209 = insertelement <2 x float> poison, float %38, i64 0
  %210 = insertelement <2 x float> %209, float %31, i64 1
  %211 = shufflevector <2 x float> %149, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %212 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %210, <2 x float> %211, <2 x float> %208)
  %213 = insertelement <2 x float> poison, float %41, i64 0
  %214 = insertelement <2 x float> %213, float %39, i64 1
  %215 = fmul <2 x float> %201, %214
  %216 = insertelement <2 x float> poison, float %44, i64 0
  %217 = insertelement <2 x float> %216, float %42, i64 1
  %218 = fmul <2 x float> %212, %217
  %219 = extractelement <2 x float> %215, i64 1
  %220 = extractelement <2 x float> %201, i64 1
  %221 = tail call float @llvm.fmuladd.f32(float %219, float %220, float %mul8.i99.i)
  %222 = extractelement <2 x float> %215, i64 0
  %223 = extractelement <2 x float> %201, i64 0
  %224 = tail call float @llvm.fmuladd.f32(float %222, float %223, float %221)
  %add.i = fadd float %224, %invMassA
  %add31.i = fadd float %add.i, %invMassB
  %225 = extractelement <2 x float> %218, i64 1
  %226 = extractelement <2 x float> %212, i64 1
  %227 = tail call float @llvm.fmuladd.f32(float %225, float %226, float %mul8.i102.i)
  %228 = extractelement <2 x float> %218, i64 0
  %229 = extractelement <2 x float> %212, i64 0
  %230 = tail call float @llvm.fmuladd.f32(float %228, float %229, float %227)
  %add35.i = fadd float %add31.i, %230
  %231 = shufflevector <2 x float> %177, <2 x float> poison, <2 x i32> zeroinitializer
  %232 = fmul <2 x float> %193, %231
  %233 = shufflevector <2 x float> %169, <2 x float> poison, <2 x i32> zeroinitializer
  %234 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %195, <2 x float> %233, <2 x float> %232)
  %235 = shufflevector <2 x float> %183, <2 x float> poison, <2 x i32> zeroinitializer
  %236 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %199, <2 x float> %235, <2 x float> %234)
  %237 = shufflevector <2 x float> %177, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %238 = fmul <2 x float> %204, %237
  %239 = shufflevector <2 x float> %169, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %240 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %206, <2 x float> %239, <2 x float> %238)
  %241 = shufflevector <2 x float> %183, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %242 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %210, <2 x float> %241, <2 x float> %240)
  %243 = extractelement <2 x float> %236, i64 1
  %mul.i.i130 = fmul float %39, %243
  %244 = extractelement <2 x float> %236, i64 0
  %mul14.i.i134 = fmul float %41, %244
  %245 = extractelement <2 x float> %242, i64 1
  %mul.i85.i139 = fmul float %42, %245
  %246 = extractelement <2 x float> %242, i64 0
  %mul14.i91.i143 = fmul float %44, %246
  %247 = tail call float @llvm.fmuladd.f32(float %mul.i.i130, float %243, float %mul8.i99.i148)
  %248 = tail call float @llvm.fmuladd.f32(float %mul14.i.i134, float %244, float %247)
  %add.i149 = fadd float %248, %invMassA
  %add31.i150 = fadd float %add.i149, %invMassB
  %249 = tail call float @llvm.fmuladd.f32(float %mul.i85.i139, float %245, float %mul8.i102.i151)
  %250 = tail call float @llvm.fmuladd.f32(float %mul14.i91.i143, float %246, float %249)
  %add35.i152 = fadd float %add31.i150, %250
  %251 = insertelement <2 x float> %133, float %0, i64 1
  %252 = insertelement <2 x float> %167, float %jacB.sroa.0.0.copyload, i64 1
  %253 = fmul <2 x float> %251, %252
  %254 = fmul <2 x float> %215, %236
  %255 = fmul <2 x float> %218, %242
  %256 = insertelement <2 x float> poison, float %invMassA, i64 0
  %257 = shufflevector <2 x float> %256, <2 x float> poison, <2 x i32> zeroinitializer
  %258 = fmul <2 x float> %253, %257
  %259 = insertelement <2 x float> poison, float %invMassB, i64 0
  %260 = shufflevector <2 x float> %259, <2 x float> poison, <2 x i32> zeroinitializer
  %261 = fmul <2 x float> %253, %260
  %262 = fadd <2 x float> %254, %255
  %263 = fadd <2 x float> %258, %262
  %264 = fadd <2 x float> %261, %263
  %265 = extractelement <2 x float> %264, i64 1
  %add.i252 = fadd float %265, %add8.i86.i
  %266 = extractelement <2 x float> %264, i64 0
  %add23.i = fadd float %266, %add.i252
  %267 = fneg float %add23.i
  %neg35 = fmul float %add23.i, %267
  %268 = tail call float @llvm.fmuladd.f32(float %add35.i, float %add35.i152, float %neg35)
  %div36 = fdiv float 1.000000e+00, %268
  %mul38 = fmul float %add35.i, %124
  %mul40 = fmul float %126, %267
  %mul41 = fmul float %div36, %mul40
  %269 = tail call float @llvm.fmuladd.f32(float %mul38, float %div36, float %mul41)
  store float %269, ptr %imp0, align 4
  %mul43 = fmul float %add35.i152, %126
  %mul46 = fmul float %124, %267
  %mul47 = fmul float %div36, %mul46
  %270 = tail call float @llvm.fmuladd.f32(float %mul43, float %div36, float %mul47)
  store float %270, ptr %imp1, align 4
  br label %cleanup

cleanup:                                          ; preds = %entry, %if.end
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fmuladd.f32(float, float, float) #1

; Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) uwtable
define dso_local void @_ZN24btSolve2LinearConstraint30resolveBilateralPairConstraintEP11btRigidBodyS1_RK11btMatrix3x3S4_RK9btVector3fS7_S7_S7_S7_fS7_S7_S7_fS7_S7_S7_fS7_RfS8_(ptr nocapture noundef nonnull readonly align 4 dereferenceable(8) %this, ptr nocapture noundef readonly %body1, ptr nocapture noundef readonly %body2, ptr nocapture noundef nonnull readonly align 4 dereferenceable(48) %world2A, ptr nocapture noundef nonnull readonly align 4 dereferenceable(48) %world2B, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %invInertiaADiag, float noundef %invMassA, ptr nocapture noundef nonnull readnone align 4 dereferenceable(16) %linvelA, ptr nocapture noundef nonnull readnone align 4 dereferenceable(16) %angvelA, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %rel_posA1, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %invInertiaBDiag, float noundef %invMassB, ptr nocapture noundef nonnull readnone align 4 dereferenceable(16) %linvelB, ptr nocapture noundef nonnull readnone align 4 dereferenceable(16) %angvelB, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %rel_posA2, float noundef %depthA, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %normalA, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %rel_posB1, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %rel_posB2, float noundef %depthB, ptr nocapture noundef nonnull readonly align 4 dereferenceable(16) %normalB, ptr nocapture noundef nonnull align 4 dereferenceable(4) %imp0, ptr nocapture noundef nonnull writeonly align 4 dereferenceable(4) %imp1) local_unnamed_addr #0 align 2 {
entry:
  store float 0.000000e+00, ptr %imp0, align 4
  store float 0.000000e+00, ptr %imp1, align 4
  %0 = load float, ptr %normalA, align 4
  %arrayidx5.i.i.i = getelementptr inbounds [4 x float], ptr %normalA, i64 0, i64 1
  %1 = load float, ptr %arrayidx5.i.i.i, align 4
  %mul8.i.i.i = fmul float %1, %1
  %2 = tail call float @llvm.fmuladd.f32(float %0, float %0, float %mul8.i.i.i)
  %arrayidx10.i.i.i = getelementptr inbounds [4 x float], ptr %normalA, i64 0, i64 2
  %3 = load float, ptr %arrayidx10.i.i.i, align 4
  %4 = tail call float @llvm.fmuladd.f32(float %3, float %3, float %2)
  %sqrt.i = tail call float @llvm.sqrt.f32(float %4)
  %5 = tail call float @llvm.fabs.f32(float %sqrt.i)
  %sub = fadd float %5, -1.000000e+00
  %6 = tail call float @llvm.fabs.f32(float %sub)
  %cmp = fcmp ult float %6, 0x3E80000000000000
  br i1 %cmp, label %if.end, label %cleanup

if.end:                                           ; preds = %entry
  %arrayidx.i.i = getelementptr inbounds [4 x float], ptr %rel_posA1, i64 0, i64 1
  %7 = load float, ptr %arrayidx.i.i, align 4
  %arrayidx5.i.i = getelementptr inbounds [4 x float], ptr %rel_posA1, i64 0, i64 2
  %8 = load float, ptr %arrayidx5.i.i, align 4
  %9 = fneg float %8
  %10 = load float, ptr %rel_posA1, align 4
  %11 = fneg float %10
  %12 = fneg float %7
  %13 = load float, ptr %world2A, align 4
  %arrayidx5.i.i.i110 = getelementptr inbounds [4 x float], ptr %world2A, i64 0, i64 1
  %14 = load float, ptr %arrayidx5.i.i.i110, align 4
  %arrayidx10.i.i.i112 = getelementptr inbounds [4 x float], ptr %world2A, i64 0, i64 2
  %15 = load float, ptr %arrayidx10.i.i.i112, align 4
  %arrayidx.i.i.i = getelementptr inbounds [3 x %class.btVector3], ptr %world2A, i64 0, i64 1
  %16 = load <4 x float>, ptr %arrayidx.i.i.i, align 4
  %17 = shufflevector <4 x float> %16, <4 x float> poison, <2 x i32> <i32 0, i32 poison>
  %arrayidx5.i12.i.i = getelementptr inbounds [3 x %class.btVector3], ptr %world2A, i64 0, i64 1, i32 0, i64 1
  %18 = load <4 x float>, ptr %arrayidx5.i12.i.i, align 4
  %19 = shufflevector <4 x float> %18, <4 x float> poison, <2 x i32> <i32 0, i32 poison>
  %arrayidx10.i15.i.i = getelementptr inbounds [3 x %class.btVector3], ptr %world2A, i64 0, i64 1, i32 0, i64 2
  %20 = load <4 x float>, ptr %arrayidx10.i15.i.i, align 4
  %21 = shufflevector <4 x float> %20, <4 x float> poison, <2 x i32> <i32 0, i32 poison>
  %arrayidx.i17.i.i = getelementptr inbounds [3 x %class.btVector3], ptr %world2A, i64 0, i64 2
  %22 = load <4 x float>, ptr %arrayidx.i17.i.i, align 4
  %23 = shufflevector <4 x float> %22, <4 x float> poison, <2 x i32> <i32 0, i32 poison>
  %arrayidx5.i18.i.i = getelementptr inbounds [3 x %class.btVector3], ptr %world2A, i64 0, i64 2, i32 0, i64 1
  %24 = load float, ptr %arrayidx5.i18.i.i, align 4
  %arrayidx10.i21.i.i = getelementptr inbounds [3 x %class.btVector3], ptr %world2A, i64 0, i64 2, i32 0, i64 2
  %25 = load float, ptr %arrayidx10.i21.i.i, align 4
  %fneg.i.i = fneg float %0
  %fneg4.i.i = fneg float %1
  %fneg8.i.i = fneg float %3
  %arrayidx.i48.i = getelementptr inbounds [4 x float], ptr %rel_posA2, i64 0, i64 1
  %26 = load float, ptr %arrayidx.i48.i, align 4
  %arrayidx5.i50.i = getelementptr inbounds [4 x float], ptr %rel_posA2, i64 0, i64 2
  %27 = load float, ptr %arrayidx5.i50.i, align 4
  %28 = load float, ptr %rel_posA2, align 4
  %29 = load float, ptr %world2B, align 4
  %arrayidx5.i.i60.i = getelementptr inbounds [4 x float], ptr %world2B, i64 0, i64 1
  %30 = load float, ptr %arrayidx5.i.i60.i, align 4
  %arrayidx10.i.i63.i = getelementptr inbounds [4 x float], ptr %world2B, i64 0, i64 2
  %31 = load float, ptr %arrayidx10.i.i63.i, align 4
  %arrayidx.i.i65.i = getelementptr inbounds [3 x %class.btVector3], ptr %world2B, i64 0, i64 1
  %32 = load float, ptr %arrayidx.i.i65.i, align 4
  %arrayidx5.i12.i66.i = getelementptr inbounds [3 x %class.btVector3], ptr %world2B, i64 0, i64 1, i32 0, i64 1
  %33 = load float, ptr %arrayidx5.i12.i66.i, align 4
  %arrayidx10.i15.i68.i = getelementptr inbounds [3 x %class.btVector3], ptr %world2B, i64 0, i64 1, i32 0, i64 2
  %34 = load float, ptr %arrayidx10.i15.i68.i, align 4
  %arrayidx.i17.i69.i = getelementptr inbounds [3 x %class.btVector3], ptr %world2B, i64 0, i64 2
  %35 = load <4 x float>, ptr %arrayidx.i17.i69.i, align 4
  %36 = shufflevector <4 x float> %35, <4 x float> poison, <2 x i32> <i32 0, i32 poison>
  %arrayidx5.i18.i70.i = getelementptr inbounds [3 x %class.btVector3], ptr %world2B, i64 0, i64 2, i32 0, i64 1
  %37 = load float, ptr %arrayidx5.i18.i70.i, align 4
  %arrayidx10.i21.i72.i = getelementptr inbounds [3 x %class.btVector3], ptr %world2B, i64 0, i64 2, i32 0, i64 2
  %38 = load float, ptr %arrayidx10.i21.i72.i, align 4
  %39 = load float, ptr %invInertiaADiag, align 4
  %arrayidx5.i78.i = getelementptr inbounds [4 x float], ptr %invInertiaADiag, i64 0, i64 1
  %40 = load float, ptr %arrayidx5.i78.i, align 4
  %arrayidx11.i.i = getelementptr inbounds [4 x float], ptr %invInertiaADiag, i64 0, i64 2
  %41 = load float, ptr %arrayidx11.i.i, align 4
  %42 = load float, ptr %invInertiaBDiag, align 4
  %arrayidx5.i86.i = getelementptr inbounds [4 x float], ptr %invInertiaBDiag, i64 0, i64 1
  %43 = load float, ptr %arrayidx5.i86.i, align 4
  %arrayidx11.i89.i = getelementptr inbounds [4 x float], ptr %invInertiaBDiag, i64 0, i64 2
  %44 = load float, ptr %arrayidx11.i89.i, align 4
  %jacB.sroa.0.0.copyload = load float, ptr %normalB, align 4
  %jacB.sroa.5.0.normalB.sroa_idx = getelementptr inbounds i8, ptr %normalB, i64 4
  %jacB.sroa.5.0.copyload = load float, ptr %jacB.sroa.5.0.normalB.sroa_idx, align 4
  %jacB.sroa.7.0.normalB.sroa_idx = getelementptr inbounds i8, ptr %normalB, i64 8
  %jacB.sroa.7.0.copyload = load float, ptr %jacB.sroa.7.0.normalB.sroa_idx, align 4
  %arrayidx.i.i117 = getelementptr inbounds [4 x float], ptr %rel_posB1, i64 0, i64 1
  %45 = load float, ptr %arrayidx.i.i117, align 4
  %arrayidx5.i.i119 = getelementptr inbounds [4 x float], ptr %rel_posB1, i64 0, i64 2
  %46 = load float, ptr %arrayidx5.i.i119, align 4
  %47 = fneg float %46
  %48 = load float, ptr %rel_posB1, align 4
  %49 = fneg float %48
  %50 = fneg float %45
  %fneg.i.i139 = fneg float %jacB.sroa.0.0.copyload
  %fneg4.i.i140 = fneg float %jacB.sroa.5.0.copyload
  %fneg8.i.i141 = fneg float %jacB.sroa.7.0.copyload
  %arrayidx.i48.i142 = getelementptr inbounds [4 x float], ptr %rel_posB2, i64 0, i64 1
  %51 = load float, ptr %arrayidx.i48.i142, align 4
  %arrayidx5.i50.i143 = getelementptr inbounds [4 x float], ptr %rel_posB2, i64 0, i64 2
  %52 = load float, ptr %arrayidx5.i50.i143, align 4
  %53 = load float, ptr %rel_posB2, align 4
  %m_linearVelocity.i = getelementptr inbounds %class.btRigidBody, ptr %body1, i64 0, i32 2
  %m_angularVelocity.i = getelementptr inbounds %class.btRigidBody, ptr %body1, i64 0, i32 3
  %arrayidx.i.i186 = getelementptr inbounds %class.btRigidBody, ptr %body1, i64 0, i32 3, i32 0, i64 1
  %54 = load float, ptr %arrayidx.i.i186, align 4
  %arrayidx5.i.i188 = getelementptr inbounds %class.btRigidBody, ptr %body1, i64 0, i32 3, i32 0, i64 2
  %55 = load float, ptr %arrayidx5.i.i188, align 4
  %56 = load float, ptr %m_angularVelocity.i, align 4
  %57 = load float, ptr %m_linearVelocity.i, align 4
  %arrayidx5.i5.i = getelementptr inbounds %class.btRigidBody, ptr %body1, i64 0, i32 2, i32 0, i64 1
  %58 = load float, ptr %arrayidx5.i5.i, align 4
  %arrayidx11.i.i193 = getelementptr inbounds %class.btRigidBody, ptr %body1, i64 0, i32 2, i32 0, i64 2
  %59 = load float, ptr %arrayidx11.i.i193, align 4
  %m_linearVelocity.i194 = getelementptr inbounds %class.btRigidBody, ptr %body2, i64 0, i32 2
  %m_angularVelocity.i195 = getelementptr inbounds %class.btRigidBody, ptr %body2, i64 0, i32 3
  %arrayidx.i.i196 = getelementptr inbounds %class.btRigidBody, ptr %body2, i64 0, i32 3, i32 0, i64 1
  %60 = load float, ptr %arrayidx.i.i196, align 4
  %arrayidx5.i.i198 = getelementptr inbounds %class.btRigidBody, ptr %body2, i64 0, i32 3, i32 0, i64 2
  %61 = load float, ptr %arrayidx5.i.i198, align 4
  %62 = load float, ptr %m_angularVelocity.i195, align 4
  %63 = load float, ptr %m_linearVelocity.i194, align 4
  %64 = insertelement <2 x float> poison, float %55, i64 0
  %65 = insertelement <2 x float> %64, float %61, i64 1
  %66 = fneg <2 x float> %65
  %67 = insertelement <2 x float> poison, float %7, i64 0
  %68 = shufflevector <2 x float> %67, <2 x float> poison, <2 x i32> zeroinitializer
  %69 = fmul <2 x float> %68, %66
  %70 = insertelement <2 x float> poison, float %54, i64 0
  %71 = insertelement <2 x float> %70, float %60, i64 1
  %72 = insertelement <2 x float> poison, float %8, i64 0
  %73 = shufflevector <2 x float> %72, <2 x float> poison, <2 x i32> zeroinitializer
  %74 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %71, <2 x float> %73, <2 x float> %69)
  %75 = insertelement <2 x float> poison, float %57, i64 0
  %76 = insertelement <2 x float> %75, float %63, i64 1
  %77 = fadd <2 x float> %74, %76
  %arrayidx5.i5.i204 = getelementptr inbounds %class.btRigidBody, ptr %body2, i64 0, i32 2, i32 0, i64 1
  %78 = load float, ptr %arrayidx5.i5.i204, align 4
  %79 = insertelement <2 x float> poison, float %56, i64 0
  %80 = insertelement <2 x float> %79, float %62, i64 1
  %81 = fneg <2 x float> %80
  %82 = fmul <2 x float> %73, %81
  %83 = insertelement <2 x float> poison, float %10, i64 0
  %84 = shufflevector <2 x float> %83, <2 x float> poison, <2 x i32> zeroinitializer
  %85 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %65, <2 x float> %84, <2 x float> %82)
  %86 = insertelement <2 x float> poison, float %58, i64 0
  %87 = insertelement <2 x float> %86, float %78, i64 1
  %88 = fadd <2 x float> %87, %85
  %arrayidx11.i.i206 = getelementptr inbounds %class.btRigidBody, ptr %body2, i64 0, i32 2, i32 0, i64 2
  %89 = load float, ptr %arrayidx11.i.i206, align 4
  %90 = fneg <2 x float> %71
  %91 = fmul <2 x float> %84, %90
  %92 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %80, <2 x float> %68, <2 x float> %91)
  %93 = insertelement <2 x float> poison, float %59, i64 0
  %94 = insertelement <2 x float> %93, float %89, i64 1
  %95 = fadd <2 x float> %92, %94
  %shift = shufflevector <2 x float> %77, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %96 = fsub <2 x float> %77, %shift
  %sub.i = extractelement <2 x float> %96, i64 0
  %shift305 = shufflevector <2 x float> %88, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %97 = fsub <2 x float> %88, %shift305
  %sub8.i = extractelement <2 x float> %97, i64 0
  %shift306 = shufflevector <2 x float> %95, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %98 = fsub <2 x float> %95, %shift306
  %sub14.i = extractelement <2 x float> %98, i64 0
  %mul8.i = fmul float %1, %sub8.i
  %99 = tail call float @llvm.fmuladd.f32(float %0, float %sub.i, float %mul8.i)
  %100 = tail call float @llvm.fmuladd.f32(float %3, float %sub14.i, float %99)
  %101 = insertelement <2 x float> poison, float %45, i64 0
  %102 = shufflevector <2 x float> %101, <2 x float> poison, <2 x i32> zeroinitializer
  %103 = fmul <2 x float> %102, %66
  %104 = insertelement <2 x float> poison, float %46, i64 0
  %105 = shufflevector <2 x float> %104, <2 x float> poison, <2 x i32> zeroinitializer
  %106 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %71, <2 x float> %105, <2 x float> %103)
  %107 = fadd <2 x float> %106, %76
  %108 = fmul <2 x float> %105, %81
  %109 = insertelement <2 x float> poison, float %48, i64 0
  %110 = shufflevector <2 x float> %109, <2 x float> poison, <2 x i32> zeroinitializer
  %111 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %65, <2 x float> %110, <2 x float> %108)
  %112 = fadd <2 x float> %87, %111
  %113 = fmul <2 x float> %110, %90
  %114 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %80, <2 x float> %102, <2 x float> %113)
  %115 = fadd <2 x float> %114, %94
  %shift307 = shufflevector <2 x float> %107, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %116 = fsub <2 x float> %107, %shift307
  %sub.i253 = extractelement <2 x float> %116, i64 0
  %shift308 = shufflevector <2 x float> %112, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %117 = fsub <2 x float> %112, %shift308
  %sub8.i256 = extractelement <2 x float> %117, i64 0
  %shift309 = shufflevector <2 x float> %115, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %118 = fsub <2 x float> %115, %shift309
  %sub14.i259 = extractelement <2 x float> %118, i64 0
  %mul8.i267 = fmul float %jacB.sroa.5.0.copyload, %sub8.i256
  %119 = tail call float @llvm.fmuladd.f32(float %jacB.sroa.0.0.copyload, float %sub.i253, float %mul8.i267)
  %120 = tail call float @llvm.fmuladd.f32(float %jacB.sroa.7.0.copyload, float %sub14.i259, float %119)
  %121 = load float, ptr %this, align 4
  %m_damping = getelementptr inbounds %class.btSolve2LinearConstraint, ptr %this, i64 0, i32 1
  %122 = load float, ptr %m_damping, align 4
  %123 = fneg float %100
  %neg = fmul float %122, %123
  %124 = tail call float @llvm.fmuladd.f32(float %depthA, float %121, float %neg)
  %125 = fneg float %120
  %neg26 = fmul float %122, %125
  %126 = tail call float @llvm.fmuladd.f32(float %depthB, float %121, float %neg26)
  %mul8.i.i273 = fmul float %1, %jacB.sroa.5.0.copyload
  %127 = insertelement <2 x float> poison, float %1, i64 0
  %128 = shufflevector <2 x float> %127, <2 x float> poison, <2 x i32> zeroinitializer
  %129 = insertelement <2 x float> poison, float %9, i64 0
  %130 = insertelement <2 x float> %129, float %27, i64 1
  %131 = fmul <2 x float> %128, %130
  %132 = insertelement <2 x float> %67, float %26, i64 1
  %133 = insertelement <2 x float> poison, float %3, i64 0
  %134 = insertelement <2 x float> %133, float %fneg8.i.i, i64 1
  %135 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %132, <2 x float> %134, <2 x float> %131)
  %136 = shufflevector <2 x float> %133, <2 x float> poison, <2 x i32> zeroinitializer
  %137 = insertelement <2 x float> poison, float %11, i64 0
  %138 = insertelement <2 x float> %137, float %28, i64 1
  %139 = fmul <2 x float> %136, %138
  %140 = insertelement <2 x float> %72, float %27, i64 1
  %141 = insertelement <2 x float> poison, float %0, i64 0
  %142 = insertelement <2 x float> %141, float %fneg.i.i, i64 1
  %143 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %140, <2 x float> %142, <2 x float> %139)
  %144 = shufflevector <2 x float> %141, <2 x float> poison, <2 x i32> zeroinitializer
  %145 = insertelement <2 x float> %132, float %12, i64 0
  %146 = fmul <2 x float> %144, %145
  %147 = insertelement <2 x float> %83, float %28, i64 1
  %148 = insertelement <2 x float> %128, float %fneg4.i.i, i64 1
  %149 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %147, <2 x float> %148, <2 x float> %146)
  %150 = insertelement <2 x float> %19, float %33, i64 1
  %151 = fmul <2 x float> %143, %150
  %152 = insertelement <2 x float> %17, float %32, i64 1
  %153 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %152, <2 x float> %135, <2 x float> %151)
  %154 = insertelement <2 x float> %21, float %34, i64 1
  %155 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %154, <2 x float> %149, <2 x float> %153)
  %156 = insertelement <2 x float> poison, float %40, i64 0
  %157 = insertelement <2 x float> %156, float %43, i64 1
  %158 = fmul <2 x float> %155, %157
  %159 = fmul <2 x float> %155, %158
  %mul8.i99.i = extractelement <2 x float> %159, i64 0
  %160 = fmul <2 x float> %155, %158
  %mul8.i102.i = extractelement <2 x float> %160, i64 1
  %161 = insertelement <2 x float> poison, float %jacB.sroa.5.0.copyload, i64 0
  %162 = shufflevector <2 x float> %161, <2 x float> poison, <2 x i32> zeroinitializer
  %163 = insertelement <2 x float> poison, float %47, i64 0
  %164 = insertelement <2 x float> %163, float %52, i64 1
  %165 = fmul <2 x float> %162, %164
  %166 = insertelement <2 x float> %101, float %51, i64 1
  %167 = insertelement <2 x float> poison, float %jacB.sroa.7.0.copyload, i64 0
  %168 = insertelement <2 x float> %167, float %fneg8.i.i141, i64 1
  %169 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %166, <2 x float> %168, <2 x float> %165)
  %170 = shufflevector <2 x float> %167, <2 x float> poison, <2 x i32> zeroinitializer
  %171 = insertelement <2 x float> poison, float %49, i64 0
  %172 = insertelement <2 x float> %171, float %53, i64 1
  %173 = fmul <2 x float> %170, %172
  %174 = insertelement <2 x float> %104, float %52, i64 1
  %175 = insertelement <2 x float> poison, float %jacB.sroa.0.0.copyload, i64 0
  %176 = insertelement <2 x float> %175, float %fneg.i.i139, i64 1
  %177 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %174, <2 x float> %176, <2 x float> %173)
  %178 = shufflevector <2 x float> %175, <2 x float> poison, <2 x i32> zeroinitializer
  %179 = insertelement <2 x float> %166, float %50, i64 0
  %180 = fmul <2 x float> %178, %179
  %181 = insertelement <2 x float> %109, float %53, i64 1
  %182 = insertelement <2 x float> %162, float %fneg4.i.i140, i64 1
  %183 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %181, <2 x float> %182, <2 x float> %180)
  %184 = fmul <2 x float> %150, %177
  %185 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %152, <2 x float> %169, <2 x float> %184)
  %186 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %154, <2 x float> %183, <2 x float> %185)
  %187 = extractelement <2 x float> %186, i64 0
  %mul8.i.i164 = fmul float %40, %187
  %188 = extractelement <2 x float> %186, i64 1
  %mul8.i88.i173 = fmul float %43, %188
  %mul8.i99.i180 = fmul float %187, %mul8.i.i164
  %mul8.i102.i183 = fmul float %188, %mul8.i88.i173
  %189 = fmul <2 x float> %158, %186
  %mul4.i.i.i = fmul float %mul8.i.i273, %invMassA
  %mul4.i.i54.i = fmul float %mul8.i.i273, %invMassB
  %shift310 = shufflevector <2 x float> %189, <2 x float> poison, <2 x i32> <i32 1, i32 poison>
  %190 = fadd <2 x float> %189, %shift310
  %add8.i.i282 = extractelement <2 x float> %190, i64 0
  %add8.i74.i = fadd float %mul4.i.i.i, %add8.i.i282
  %add8.i86.i = fadd float %mul4.i.i54.i, %add8.i74.i
  %191 = shufflevector <2 x float> %143, <2 x float> poison, <2 x i32> zeroinitializer
  %192 = insertelement <2 x float> poison, float %24, i64 0
  %193 = insertelement <2 x float> %192, float %14, i64 1
  %194 = fmul <2 x float> %191, %193
  %195 = insertelement <2 x float> %23, float %13, i64 1
  %196 = shufflevector <2 x float> %135, <2 x float> poison, <2 x i32> zeroinitializer
  %197 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %195, <2 x float> %196, <2 x float> %194)
  %198 = insertelement <2 x float> poison, float %25, i64 0
  %199 = insertelement <2 x float> %198, float %15, i64 1
  %200 = shufflevector <2 x float> %149, <2 x float> poison, <2 x i32> zeroinitializer
  %201 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %199, <2 x float> %200, <2 x float> %197)
  %202 = shufflevector <2 x float> %143, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %203 = insertelement <2 x float> poison, float %37, i64 0
  %204 = insertelement <2 x float> %203, float %30, i64 1
  %205 = fmul <2 x float> %202, %204
  %206 = insertelement <2 x float> %36, float %29, i64 1
  %207 = shufflevector <2 x float> %135, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %208 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %206, <2 x float> %207, <2 x float> %205)
  %209 = insertelement <2 x float> poison, float %38, i64 0
  %210 = insertelement <2 x float> %209, float %31, i64 1
  %211 = shufflevector <2 x float> %149, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %212 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %210, <2 x float> %211, <2 x float> %208)
  %213 = insertelement <2 x float> poison, float %41, i64 0
  %214 = insertelement <2 x float> %213, float %39, i64 1
  %215 = fmul <2 x float> %201, %214
  %216 = insertelement <2 x float> poison, float %44, i64 0
  %217 = insertelement <2 x float> %216, float %42, i64 1
  %218 = fmul <2 x float> %212, %217
  %219 = extractelement <2 x float> %215, i64 1
  %220 = extractelement <2 x float> %201, i64 1
  %221 = tail call float @llvm.fmuladd.f32(float %219, float %220, float %mul8.i99.i)
  %222 = extractelement <2 x float> %215, i64 0
  %223 = extractelement <2 x float> %201, i64 0
  %224 = tail call float @llvm.fmuladd.f32(float %222, float %223, float %221)
  %add.i = fadd float %224, %invMassA
  %add31.i = fadd float %add.i, %invMassB
  %225 = extractelement <2 x float> %218, i64 1
  %226 = extractelement <2 x float> %212, i64 1
  %227 = tail call float @llvm.fmuladd.f32(float %225, float %226, float %mul8.i102.i)
  %228 = extractelement <2 x float> %218, i64 0
  %229 = extractelement <2 x float> %212, i64 0
  %230 = tail call float @llvm.fmuladd.f32(float %228, float %229, float %227)
  %add35.i = fadd float %add31.i, %230
  %231 = shufflevector <2 x float> %177, <2 x float> poison, <2 x i32> zeroinitializer
  %232 = fmul <2 x float> %193, %231
  %233 = shufflevector <2 x float> %169, <2 x float> poison, <2 x i32> zeroinitializer
  %234 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %195, <2 x float> %233, <2 x float> %232)
  %235 = shufflevector <2 x float> %183, <2 x float> poison, <2 x i32> zeroinitializer
  %236 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %199, <2 x float> %235, <2 x float> %234)
  %237 = shufflevector <2 x float> %177, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %238 = fmul <2 x float> %204, %237
  %239 = shufflevector <2 x float> %169, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %240 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %206, <2 x float> %239, <2 x float> %238)
  %241 = shufflevector <2 x float> %183, <2 x float> poison, <2 x i32> <i32 1, i32 1>
  %242 = tail call <2 x float> @llvm.fmuladd.v2f32(<2 x float> %210, <2 x float> %241, <2 x float> %240)
  %243 = extractelement <2 x float> %236, i64 1
  %mul.i.i162 = fmul float %39, %243
  %244 = extractelement <2 x float> %236, i64 0
  %mul14.i.i166 = fmul float %41, %244
  %245 = extractelement <2 x float> %242, i64 1
  %mul.i85.i171 = fmul float %42, %245
  %246 = extractelement <2 x float> %242, i64 0
  %mul14.i91.i175 = fmul float %44, %246
  %247 = tail call float @llvm.fmuladd.f32(float %mul.i.i162, float %243, float %mul8.i99.i180)
  %248 = tail call float @llvm.fmuladd.f32(float %mul14.i.i166, float %244, float %247)
  %add.i181 = fadd float %248, %invMassA
  %add31.i182 = fadd float %add.i181, %invMassB
  %249 = tail call float @llvm.fmuladd.f32(float %mul.i85.i171, float %245, float %mul8.i102.i183)
  %250 = tail call float @llvm.fmuladd.f32(float %mul14.i91.i175, float %246, float %249)
  %add35.i184 = fadd float %add31.i182, %250
  %251 = insertelement <2 x float> %133, float %0, i64 1
  %252 = insertelement <2 x float> %167, float %jacB.sroa.0.0.copyload, i64 1
  %253 = fmul <2 x float> %251, %252
  %254 = fmul <2 x float> %215, %236
  %255 = fmul <2 x float> %218, %242
  %256 = insertelement <2 x float> poison, float %invMassA, i64 0
  %257 = shufflevector <2 x float> %256, <2 x float> poison, <2 x i32> zeroinitializer
  %258 = fmul <2 x float> %253, %257
  %259 = insertelement <2 x float> poison, float %invMassB, i64 0
  %260 = shufflevector <2 x float> %259, <2 x float> poison, <2 x i32> zeroinitializer
  %261 = fmul <2 x float> %253, %260
  %262 = fadd <2 x float> %254, %255
  %263 = fadd <2 x float> %258, %262
  %264 = fadd <2 x float> %261, %263
  %265 = extractelement <2 x float> %264, i64 1
  %add.i284 = fadd float %265, %add8.i86.i
  %266 = extractelement <2 x float> %264, i64 0
  %add23.i = fadd float %266, %add.i284
  %267 = fneg float %add23.i
  %neg31 = fmul float %add23.i, %267
  %268 = tail call float @llvm.fmuladd.f32(float %add35.i, float %add35.i184, float %neg31)
  %div = fdiv float 1.000000e+00, %268
  %mul = fmul float %add35.i, %124
  %mul34 = fmul float %126, %267
  %mul35 = fmul float %div, %mul34
  %269 = tail call float @llvm.fmuladd.f32(float %mul, float %div, float %mul35)
  store float %269, ptr %imp0, align 4
  %mul37 = fmul float %add35.i184, %126
  %mul40 = fmul float %124, %267
  %mul41 = fmul float %div, %mul40
  %270 = tail call float @llvm.fmuladd.f32(float %mul37, float %div, float %mul41)
  store float %270, ptr %imp1, align 4
  %271 = load float, ptr %imp0, align 4
  %cmp42 = fcmp ogt float %271, 0.000000e+00
  br i1 %cmp42, label %if.then43, label %if.else53

if.then43:                                        ; preds = %if.end
  %cmp44 = fcmp ogt float %270, 0.000000e+00
  br i1 %cmp44, label %cleanup, label %if.else

if.else:                                          ; preds = %if.then43
  store float 0.000000e+00, ptr %imp1, align 4
  %div47 = fdiv float %124, %add35.i
  store float %div47, ptr %imp0, align 4
  %cmp48 = fcmp ogt float %div47, 0.000000e+00
  br i1 %cmp48, label %cleanup, label %cleanup.sink.split

if.else53:                                        ; preds = %if.end
  store float 0.000000e+00, ptr %imp0, align 4
  %div55 = fdiv float %126, %add35.i184
  store float %div55, ptr %imp1, align 4
  %cmp56 = fcmp ugt float %div55, 0.000000e+00
  br i1 %cmp56, label %cleanup, label %if.then57

if.then57:                                        ; preds = %if.else53
  store float 0.000000e+00, ptr %imp1, align 4
  %div59 = fdiv float %124, %add35.i
  store float %div59, ptr %imp0, align 4
  %cmp60 = fcmp ogt float %div59, 0.000000e+00
  br i1 %cmp60, label %cleanup, label %cleanup.sink.split

cleanup.sink.split:                               ; preds = %if.then57, %if.else
  store float 0.000000e+00, ptr %imp0, align 4
  br label %cleanup

cleanup:                                          ; preds = %cleanup.sink.split, %if.else, %if.then43, %if.else53, %if.then57, %entry
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.sqrt.f32(float) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fmuladd.v2f32(<2 x float>, <2 x float>, <2 x float>) #2

attributes #0 = { mustprogress nofree nosync nounwind willreturn memory(argmem: readwrite) uwtable "min-legal-vector-width"="64" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"clang version 18.0.0"}
!5 = !{!6, !6, i64 0}
!6 = !{!"float", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C++ TBAA"}
!9 = !{!10, !6, i64 0}
!10 = !{!"_ZTS24btSolve2LinearConstraint", !6, i64 0, !6, i64 4}
!11 = !{!10, !6, i64 4}
